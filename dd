using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using DTVPDProject.Repo;

namespace DTVPDProject.EFRepo
{
    public class EFSimulationsRepo : ISimulationsRepo
    {
        private readonly MyDbContext _context;

        public EFSimulationsRepo(MyDbContext context)
        {
            _context = context;
        }

        // Fetch all simulations
        public ObservableCollection<Simulation> GetAllSimulations()
        {
            return new ObservableCollection<Simulation>(_context.Simulations.ToList());
        }

        public Simulation GetSimulationById(int id)
        {
            return _context.Simulations.Find(id); // Fetch a specific simulation by ID
        }

        public ObservableCollection<Simulation> GetSimulations()
        {
            return GetAllSimulations(); // This can just return all simulations for now.
        }

        // Update a simulation's status
        public void UpdateSimulation(Simulation simulation)
        {
            var existingSimulation = _context.Simulations.FirstOrDefault(s => s.SimulationID == simulation.SimulationID);
            if (existingSimulation != null)
            {
                existingSimulation.Status = simulation.Status;
                existingSimulation.UpdatedAt = DateTime.Now;
                _context.SaveChanges();
            }
        }

        public void UpdateSimulationStatus(int id, string status)
        {
            var existingSimulation = _context.Simulations.FirstOrDefault(s => s.SimulationID == id);
            if (existingSimulation != null)
            {
                existingSimulation.Status = status;
                _context.SaveChanges();
            }
        }
    }
}
----------------------

using System.Collections.ObjectModel;

namespace DTVPDProject.Repo
{
    public interface ISimulationsRepo
    {
        ObservableCollection<Simulation> GetSimulations(); // Fetch all simulations
        Simulation GetSimulationById(int id); // Fetch specific simulation by ID
        void UpdateSimulation(Simulation simulation); // Update simulation details
        void UpdateSimulationStatus(int id, string status); // Update the status of a specific simulation
    }
}
-------------------------------

using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Input;
using DTVPDProject.Commands;
using DTVPDProject.Repo;

namespace DTVPDProject.ViewModels
{
    public class SimulationManagementViewModel : INotifyPropertyChanged
    {
        private readonly ISimulationsRepo _repo;
        public ObservableCollection<Simulation> Simulations { get; set; }
        private Simulation _selectedSimulation;

        public SimulationManagementViewModel(ISimulationsRepo repo)
        {
            _repo = repo;
            Simulations = _repo.GetAllSimulations(); // Fetch simulations
        }

        public Simulation SelectedSimulation
        {
            get => _selectedSimulation;
            set
            {
                _selectedSimulation = value;
                OnPropertyChanged(nameof(SelectedSimulation));
            }
        }

        public ICommand StartCommand => new RelayCommand(param => StartSimulation());
        public ICommand StopCommand => new RelayCommand(param => StopSimulation());
        public ICommand UpdateStatusCommand => new RelayCommand(param => UpdateSimulationStatus());

        private void StartSimulation()
        {
            if (SelectedSimulation != null)
            {
                SelectedSimulation.Status = "Started";
                _repo.UpdateSimulation(SelectedSimulation);
            }
        }

        private void StopSimulation()
        {
            if (SelectedSimulation != null)
            {
                SelectedSimulation.Status = "Stopped";
                _repo.UpdateSimulation(SelectedSimulation);
            }
        }

        private void UpdateSimulationStatus()
        {
            if (SelectedSimulation != null)
            {
                // Here, you'll need to implement logic to determine the selected radio button value
                // This might involve binding to the View's properties or passing the status directly
                string status = SelectedSimulation.Status; // Adjust this to get the actual selected status
                _repo.UpdateSimulationStatus(SelectedSimulation.SimulationID, status);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand class implementation remains unchanged.
}
---------------------------------------------------------

<Window x:Class="DTVPDProject.Pages.SimulationManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        mc:Ignorable="d"
        Title="Simulation Management" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBlock Text="List of Simulations" FontSize="18" FontWeight="Bold" Margin="10" VerticalAlignment="Center" Foreground="#333333"/>
            <Button Grid.Column="1" Content="Update Simulation Results" Margin="10" Background="#2196F3" Foreground="White" Command="{Binding UpdateStatusCommand}"/>
        </Grid>

        <Grid Grid.Row="1" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <ListBox Grid.Row="0" ItemsSource="{Binding Simulations}" SelectedItem="{Binding SelectedSimulation}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel>
                                <TextBlock Text="{Binding SimulationID}" />
                                <TextBlock Text="{Binding Status}" />
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
                    <Button Content="Start Simulation" Command="{Binding StartCommand}" Margin="10"/>
                    <Button Content="Stop Simulation" Command="{Binding StopCommand}" Margin="10"/>
                </StackPanel>
            </Grid>
        </Grid>

        <Grid Grid.Row="2" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Button Content="Start" Margin="10"  Grid.Column="0" Background="#8BC34A" Foreground="White"/>
            <Button Content="Pause" Margin="10"  Grid.Column="1" Background="#FFC107" Foreground="White"/>
            <Button Content="Update Status and Stop" Margin="10" Grid.Column="2" Background="#2196F3" Foreground="White"/>
        </Grid>

        <Grid Grid.Row="3" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBox Margin="10" Grid.Column="0" Height="50" VerticalAlignment="Top" HorizontalAlignment="Stretch" Background="#F7F7F7" Foreground="#333333">
                <TextBox.Text>
                    <Binding Path="Notes" UpdateSourceTrigger="PropertyChanged"/>
                </TextBox.Text>
            </TextBox>
            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="10">
                <TextBlock Text="Status:" Margin="5" Foreground="#333333"/>
                <RadioButton Content="Succeeded" Margin="5" GroupName="Status" Foreground="#333333" Checked="RadioButton_Checked" Tag="Succeeded" Command="{Binding UpdateStatusCommand}"/>
                <RadioButton Content="Failed" Margin="5" GroupName="Status" Foreground="#333333" Checked="RadioButton_Checked" Tag="Failed" Command="{Binding UpdateStatusCommand}"/>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
---------------------------------

using System.Data.Entity;

namespace DTVPDProject.EFRepo
{
    public class MyDbContext : DbContext
    {
        public MyDbContext() : base("name=YourConnectionStringName")
        {
            // Configure database connection string in the app.config or web.config
        }

        public DbSet<Simulation> Simulations { get; set; } // Set for Simulation entities
    }
}

-------------------------------------------
app.config
----
<configuration>
  <connectionStrings>
    <add name="YourConnectionStringName" 
         connectionString="Server=your_server;Database=your_database;User Id=your_username;Password=your_password;" 
         providerName="System.Data.SqlClient" />
  </connectionStrings>
</configuration>
