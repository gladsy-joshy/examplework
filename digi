<Window x:Class="DTVPDProject.Pages.SimulationManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        mc:Ignorable="d"
        Title="SimulationManagementPageWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBlock Text="List of Simulations" FontSize="18" FontWeight="Bold" Margin="10" VerticalAlignment="Center" Foreground="#333333"/>
            <Button Grid.Column="1" Content="Update Simulation Results" Margin="10" Background="#2196F3" Foreground="White"/>
        </Grid>

        <DataGrid x:Name="DataGrid" Grid.Row="1" Margin="10" AutoGenerateColumns="False" ItemsSource="{Binding Simulations}" Background="#F7F7F7">
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" Binding="{Binding Id}" Width="50" Foreground="#333333"/>
                <DataGridTextColumn Header="User  " Binding="{Binding User}" Width="150" Foreground="#333333"/>
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" Foreground="#333333"/>
            </DataGrid.Columns>
        </DataGrid>

        <Grid Grid.Row="2" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Button Content="Start" Margin="10"  Grid.Column="0" Background="#8BC34A" Foreground="White"/>
            <Button Content="Pause" Margin="10"  Grid.Column="1" Background="#FFC107" Foreground="White"/>
            <Button Content="Update Status and Stop" Margin="10" Grid.Column="2" Background="#2196F3" Foreground="White"/>
        </Grid>

        <Grid Grid.Row="3" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBox Margin="10" Grid.Column="0" Height="50" VerticalAlignment="Top" HorizontalAlignment="Stretch" Background="#F7F7F7" Foreground="#333333">
                <TextBox.Text>
                    <Binding Path="Notes" UpdateSourceTrigger="PropertyChanged"/>
                </TextBox.Text>
            </TextBox>
            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="10">
                <TextBlock Text="Status:" Margin="5" Foreground="#333333"/>
                <RadioButton Content="Succeeded" Margin="5" GroupName="Status" Foreground="#333333" Checked="RadioButton_Checked" Tag="Succeeded"/>
                <RadioButton Content="Failed" Margin="5" GroupName="Status" Foreground="#333333" Checked="RadioButton_Checked" Tag="Failed"/>
            </StackPanel>
        </Grid>
    </Grid>
</Window>





----------------------------------------------




<Window x:Class="DTVPDProject.Pages.DataManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        mc:Ignorable="d"
        Title="DataManagementPageWindow" Height="450" Width="800">
    <Window.Resources>
        <ResourceDictionary>
            <SolidColorBrush x:Key="PrimaryColor" Color="#2196F3" />
            <!-- Blue -->
            <SolidColorBrush x:Key="SecondaryColor" Color="#F7F7F7" />
            <!-- Light Gray -->
            <SolidColorBrush x:Key="AccentColor" Color="#FFC107" />
            <!-- Orange -->
            <SolidColorBrush x:Key="BackgroundColor" Color="#FFFFFF" />
            <!-- White -->
            <SolidColorBrush x:Key="TextColor" Color="#333333" />
            <!-- Dark Gray -->
        </ResourceDictionary>
    </Window.Resources>
    <Grid Background="{StaticResource BackgroundColor}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Search and Filter Section -->
        <StackPanel Grid.Column="0" Grid.Row="0" Margin="10" Background="{StaticResource PrimaryColor}">
            <Label Content="Search:" Foreground="{StaticResource TextColor}"/>
            <TextBox x:Name="searchTextBox" Width="200" Background="{StaticResource SecondaryColor}" Foreground="{StaticResource TextColor}"/>
            <Label Content="Filter by:" Foreground="{StaticResource TextColor}"/>
            <ComboBox x:Name="filterComboBox" Width="200" Margin="5" Background="{StaticResource SecondaryColor}" Foreground="{StaticResource TextColor}">
                <ComboBoxItem Content="Design Specifications"/>
                <ComboBoxItem Content="Simulation Parameters"/>
                <ComboBoxItem Content="Results"/>
            </ComboBox>
            <Button Content="Search" Margin="5" Background="{StaticResource AccentColor}" Foreground="{StaticResource TextColor}"/>
        </StackPanel>

        <!-- Data Grid Section -->
        <DataGrid x:Name="dataGrid" Grid.Column="0" Grid.Row="1" Margin="10" 
                  AutoGenerateColumns="False" Background="{StaticResource BackgroundColor}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Design Specification" Binding="{Binding DesignSpecification}"/>
                <DataGridTextColumn Header="Simulation Parameter" Binding="{Binding SimulationParameter}"/>
                <DataGridTextColumn Header="Result" Binding="{Binding Result}"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Export Button -->
        <Button Content="Export to CSV"  Grid.Column="1" Grid.Row="0" Margin="10,38,10,48" Background="{StaticResource AccentColor}" Foreground="{StaticResource TextColor}"/>
    </Grid>
</Window>
----------------------------------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace DTVPDProject.ViewModels
{
    public class Simulation
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        // Add any other properties you need for the Simulation class
    }

    public class SimulationManagementViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<Simulation> _simulations;
        private string _notes;

        public ObservableCollection<Simulation> Simulations
        {
            get { return _simulations; }
            set
            {
                _simulations = value;
                OnPropertyChanged("Simulations");
            }
        }

        public string Notes
        {
            get { return _notes; }
            set
            {
                _notes = value;
                OnPropertyChanged("Notes");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public SimulationManagementViewModel()
        {
            Simulations = new ObservableCollection<Simulation>();
            // Initialize simulations here...
            // For example:
            Simulations.Add(new Simulation { Id = 1, Name = "Simulation 1", Description = "This is simulation 1" });
            Simulations.Add(new Simulation { Id = 2, Name = "Simulation 2", Description = "This is simulation 2" });
        }
    }
}
------------------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTVPDProject.Repo
{
    internal interface ISimulationResultsRepo
    {
        // Method to retrieve all simulation results
        List<SimulationResult> GetAllSimulationResults();

        // Method to retrieve a simulation result by ID
        SimulationResult GetSimulationResultById(int id);

        // Method to update a simulation result
        void UpdateSimulationResult(SimulationResult simulationResult);

        // Method to add a new simulation result
        void AddSimulationResult(SimulationResult simulationResult);

        // Method to delete a simulation result
        void DeleteSimulationResult(int id);
    }
}

--------------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DTVPDProject.EFRepo;

namespace DTVPDProject.Repo
{
    internal interface ISimulationsRepo
    {
    }
}



--------------------------



C:\StressAnalysis

















cs
----


using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using DTVPDProject.ViewModels;

namespace DTVPDProject.Pages
{
    public partial class SimulationManagementWindow : Window
    {
        public SimulationManagementWindow()
        {
            InitializeComponent();
            this.DataContext = new SimulationManagementViewModel();
        }

        private void RadioButton_Checked(object sender, RoutedEventArgs e)
        {
            var radioButton = sender as RadioButton;
            var viewModel = DataContext as SimulationManagementViewModel;

            if (radioButton != null && viewModel != null)
            {
                string status = radioButton.Tag.ToString();
                viewModel.SelectedSimulation.Status = status;
                // Update status in database
                viewModel.UpdateStatus(viewModel.SelectedSimulation.Id, status);
            }
        }
    }
}


---------------------------------------

viewmodel
--------------


using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using DTVPDProject.Models;
using DTVPDProject.Repository;

namespace DTVPDProject.ViewModels
{
    public class SimulationManagementViewModel : INotifyPropertyChanged
    {
        private readonly SimulationRepository _simulationRepo;
        private Simulation _selectedSimulation;

        public ObservableCollection<Simulation> Simulations { get; set; }
        public Simulation SelectedSimulation
        {
            get { return _selectedSimulation; }
            set
            {
                _selectedSimulation = value;
                OnPropertyChanged("SelectedSimulation");
            }
        }

        public SimulationManagementViewModel()
        {
            _simulationRepo = new SimulationRepository();
            Simulations = new ObservableCollection<Simulation>(_simulationRepo.GetSimulations());
        }

        public void StartSimulation(int simulationId)
        {
            var simulation = _simulationRepo.GetSimulationById(simulationId);
            simulation.Status = "Started";
            _simulationRepo.UpdateSimulation(simulation);
            OnPropertyChanged("Simulations");
        }

        public void StopSimulation(int simulationId)
        {
            var simulation = _simulationRepo.GetSimulationById(simulationId);
            simulation.Status = "Stopped";
            _simulationRepo.UpdateSimulation(simulation);
            OnPropertyChanged("Simulations");
        }

        public void UpdateStatus(int simulationId, string status)
        {
            var simulation = _simulationRepo.GetSimulationById(simulationId);
            simulation.Status = status;
            _simulationRepo.UpdateSimulation(simulation);
            OnPropertyChanged("Simulations");
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


----------------------------------------


repository
-----------------


using System.Collections.Generic;
using System.IO;
using DTVPDProject.Models;

namespace DTVPDProject.Repository
{
    public class SimulationRepository
    {
        // Example data, replace this with actual database access code
        public List<Simulation> GetSimulations()
        {
            string directoryPath = @"C:\StressAnalysis";
            var simulations = new List<Simulation>();

            foreach (var file in Directory.GetFiles(directoryPath, "*.png")) // assuming images are .png
            {
                simulations.Add(new Simulation
                {
                    Id = Path.GetFileNameWithoutExtension(file),
                    ImagePath = file,
                    Status = "Not Started",
                    User = "User A"  // Placeholder user
                });
            }

            return simulations;
        }

        public Simulation GetSimulationById(int id)
        {
            // Placeholder, return a simulation by its ID from the database
            return new Simulation();
        }

        public void UpdateSimulation(Simulation simulation)
        {
            // Implement your database update logic here
        }
    }
}
---------------------------------


xaml
-------

<DataGridTemplateColumn Header="Image" Width="100">
    <DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
            <Image Source="{Binding ImagePath}" Width="50" Height="50"/>
        </DataTemplate>
    </DataGridTemplateColumn.CellTemplate>
</DataGridTemplateColumn>



------------------------------------



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DTVPDProject.EFRepo;

namespace DTVPDProject.Repo
{
    internal interface ISimulationsRepo
    {
    }
}


--------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTVPDProject.EFRepo
{
    public class EFSimulationsRepo
    {
    }
}


-------------------------------------------------------


isimulationrepo
-----


using System.Collections.ObjectModel;
using DTVPDProject.Models;

namespace DTVPDProject.Repo
{
    public interface ISimulationsRepo
    {
        ObservableCollection<Simulation> GetSimulations(); // Fetch all simulations
        Simulation GetSimulationById(int id); // Fetch specific simulation by ID
        void UpdateSimulation(Simulation simulation); // Update simulation details
        void UpdateSimulationStatus(int id, string status); // Update the status of a specific simulation
    }
}


-------------------------------


efsimulationrepo
-------------------------


using System.Collections.ObjectModel;
using System.Linq;
using DTVPDProject.Models;
using DTVPDProject.Repo;
using DTVPDProject.EFRepo;

namespace DTVPDProject.EFRepo
{
    public class EFSimulationsRepo : ISimulationsRepo
    {
        private readonly MyDbContext _context;

        public EFSimulationsRepo(MyDbContext context)
        {
            _context = context;
        }

        // Fetch all simulations as an ObservableCollection
        public ObservableCollection<Simulation> GetSimulations()
        {
            var simulations = _context.Simulations.ToList();
            return new ObservableCollection<Simulation>(simulations);
        }

        // Fetch a specific simulation by ID
        public Simulation GetSimulationById(int id)
        {
            return _context.Simulations.FirstOrDefault(s => s.Id == id);
        }

        // Update simulation details (like status or notes)
        public void UpdateSimulation(Simulation simulation)
        {
            var existingSimulation = _context.Simulations.FirstOrDefault(s => s.Id == simulation.Id);
            if (existingSimulation != null)
            {
                existingSimulation.Status = simulation.Status;
                existingSimulation.Notes = simulation.Notes;
                _context.SaveChanges();
            }
        }

        // Update only the status of a simulation
        public void UpdateSimulationStatus(int id, string status)
        {
            var existingSimulation = _context.Simulations.FirstOrDefault(s => s.Id == id);
            if (existingSimulation != null)
            {
                existingSimulation.Status = status;
                _context.SaveChanges();
            }
        }
    }
}
------------------------------------------

simulationviewmodel


--------------------
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Input;
using DTVPDProject.Models;
using DTVPDProject.Repo;

namespace DTVPDProject.ViewModels
{
    public class SimulationViewModel : INotifyPropertyChanged
    {
        private readonly ISimulationsRepo _repo;
        private Simulation _selectedSimulation;
        public ObservableCollection<Simulation> Simulations { get; set; }

        // Property to bind to the selected item in the DataGrid
        public Simulation SelectedSimulation
        {
            get => _selectedSimulation;
            set
            {
                _selectedSimulation = value;
                OnPropertyChanged(nameof(SelectedSimulation));
            }
        }

        // Constructor to initialize the repository and load simulations
        public SimulationViewModel(ISimulationsRepo repo)
        {
            _repo = repo;
            LoadSimulations();
        }

        // Load all simulations into the ObservableCollection
        private void LoadSimulations()
        {
            Simulations = _repo.GetSimulations();
        }

        // Command to start a simulation
        public ICommand StartCommand => new RelayCommand(StartSimulation);

        private void StartSimulation(object parameter)
        {
            if (SelectedSimulation != null)
            {
                SelectedSimulation.Status = "Started";
                _repo.UpdateSimulation(SelectedSimulation);
            }
        }

        // Command to stop a simulation
        public ICommand StopCommand => new RelayCommand(StopSimulation);

        private void StopSimulation(object parameter)
        {
            if (SelectedSimulation != null)
            {
                SelectedSimulation.Status = "Stopped";
                _repo.UpdateSimulation(SelectedSimulation);
            }
        }

        // Command to update the status to "Succeeded" or "Failed"
        public ICommand UpdateStatusCommand => new RelayCommand<string>(UpdateStatus);

        private void UpdateStatus(string status)
        {
            if (SelectedSimulation != null)
            {
                SelectedSimulation.Status = status;
                _repo.UpdateSimulation(SelectedSimulation);
            }
        }

        // INotifyPropertyChanged implementation
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

-----------------------------
Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1061	'Simulation' does not contain a definition for 'Id' and no accessible extension method 'Id' accepting a first argument of type 'Simulation' could be found (are you missing a using directive or an assembly reference?)	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\EFRepo\EFSimulationsRepo.cs	37	


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1061	'Simulation' does not contain a definition for 'Notes' and no accessible extension method 'Notes' accepting a first argument of type 'Simulation' could be found (are you missing a using directive or an assembly reference?)	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\EFRepo\EFSimulationsRepo.cs	41	


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1503	Argument 1: cannot convert from 'method group' to 'System.Action'	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\ViewModels\SimulationManagementViewModel.cs	45	


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS1503	Argument 1: cannot convert from 'method group' to 'System.Action'	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\ViewModels\SimulationManagementViewModel.cs	57	


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS0308	The non-generic type 'RelayCommand' cannot be used with type arguments	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\ViewModels\SimulationManagementViewModel.cs	69	


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS0246	The type or namespace name 'MyDbContext' could not be found (are you missing a using directive or an assembly reference?)	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\EFRepo\EFSimulationsRepo.cs	14	


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS0246	The type or namespace name 'MyDbContext' could not be found (are you missing a using directive or an assembly reference?)	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\EFRepo\EFSimulationsRepo.cs	16	


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS0246	The type or namespace name 'SimulationManagementViewModel' could not be found (are you missing a using directive or an assembly reference?)	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\Pages\SimulationManagementWindow.xaml.cs	26	



Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	CS0246	The type or namespace name 'SimulationManagementViewModel' could not be found (are you missing a using directive or an assembly reference?)	DTVPDProject	C:\Users\2021470\C2504_cs\c2504_cs\dtvpd\DTVPDProjectsln\DTVPDProject\Pages\SimulationManagementWindow.xaml.cs	32	













//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DTVPDProject
{
    using System;
    using System.Collections.Generic;
    
    public partial class Simulation
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Simulation()
        {
            this.SimulationResults = new HashSet<SimulationResult>();
        }
    
        public int SimulationID { get; set; }
        public Nullable<int> TwinID { get; set; }
        public string Status { get; set; }
        public Nullable<System.DateTime> StartTime { get; set; }
        public Nullable<System.DateTime> EndTime { get; set; }
        public Nullable<System.DateTime> CreatedAt { get; set; }
        public Nullable<System.DateTime> UpdatedAt { get; set; }
    
        public virtual DigitalTwin DigitalTwin { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SimulationResult> SimulationResults { get; set; }
    }
}



------------------


efsimulationrepo
---------------------

using System;
using System.Collections.ObjectModel;
using System.Linq;
using DTVPDProject.EFRepo;
using DTVPDProject.Models;

namespace DTVPDProject.EFRepo
{
    public class EFSimulationsRepo : ISimulationsRepo
    {
        private readonly MyDbContext _context;

        public EFSimulationsRepo(MyDbContext context)
        {
            _context = context;
        }

        // Fetch all simulations
        public ObservableCollection<Simulation> GetAllSimulations()
        {
            return new ObservableCollection<Simulation>(_context.Simulations.ToList());
        }

        // Update a simulation's status
        public void UpdateSimulation(Simulation simulation)
        {
            var existingSimulation = _context.Simulations.FirstOrDefault(s => s.SimulationID == simulation.SimulationID);
            if (existingSimulation != null)
            {
                existingSimulation.Status = simulation.Status;
                existingSimulation.UpdatedAt = DateTime.Now;
                _context.SaveChanges();
            }
        }
    }
}
----------------------------
viewmodel
-----

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Input;
using DTVPDProject.EFRepo;
using DTVPDProject.Models;

namespace DTVPDProject.ViewModels
{
    public class SimulationManagementViewModel : INotifyPropertyChanged
    {
        private readonly ISimulationsRepo _repo;
        public ObservableCollection<Simulation> Simulations { get; set; }
        private Simulation _selectedSimulation;

        public SimulationManagementViewModel(ISimulationsRepo repo)
        {
            _repo = repo;
            Simulations = _repo.GetAllSimulations(); // Fetch simulations
        }

        public Simulation SelectedSimulation
        {
            get => _selectedSimulation;
            set
            {
                _selectedSimulation = value;
                OnPropertyChanged(nameof(SelectedSimulation));
            }
        }

        public ICommand StartCommand => new RelayCommand(param => StartSimulation());
        public ICommand StopCommand => new RelayCommand(param => StopSimulation());

        private void StartSimulation()
        {
            if (SelectedSimulation != null)
            {
                SelectedSimulation.Status = "Started";
                _repo.UpdateSimulation(SelectedSimulation);
            }
        }

        private void StopSimulation()
        {
            if (SelectedSimulation != null)
            {
                SelectedSimulation.Status = "Stopped";
                _repo.UpdateSimulation(SelectedSimulation);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand class implementation
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object> _canExecute;

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute(parameter);
        public void Execute(object parameter) => _execute(parameter);
        public event EventHandler CanExecuteChanged;
    }
}
----------------------------------

xaml
--------


<Window x:Class="DTVPDProject.Pages.SimulationManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Simulation Management" Height="350" Width="525">
    <Grid>
        <ListBox ItemsSource="{Binding Simulations}" SelectedItem="{Binding SelectedSimulation}">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel>
                        <TextBlock Text="{Binding SimulationID}" />
                        <TextBlock Text="{Binding Status}" />
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <Button Content="Start Simulation" Command="{Binding StartCommand}" />
        <Button Content="Stop Simulation" Command="{Binding StopCommand}" />
    </Grid>
</Window>
-------------------------

cs
---

using System.Windows;
using DTVPDProject.ViewModels;
using DTVPDProject.EFRepo;

namespace DTVPDProject.Pages
{
    public partial class SimulationManagementWindow : Window
    {
        public SimulationManagementWindow()
        {
            InitializeComponent();
            var context = new MyDbContext();  // Assumes MyDbContext is configured correctly
            var repo = new EFSimulationsRepo(context);
            this.DataContext = new SimulationManagementViewModel(repo);
        }
    }
}


