<Window x:Class="DTVPDProject.Pages.SimulationManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        mc:Ignorable="d"
        Title="SimulationManagementPageWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBlock Text="List of Simulations" FontSize="18" FontWeight="Bold" Margin="10" VerticalAlignment="Center" Foreground="#333333"/>
            <Button Grid.Column="1" Content="Update Simulation Results" Margin="10" Background="#2196F3" Foreground="White"/>
        </Grid>

        <DataGrid x:Name="DataGrid" Grid.Row="1" Margin="10" AutoGenerateColumns="False" ItemsSource="{Binding Simulations}" Background="#F7F7F7">
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" Binding="{Binding Id}" Width="50" Foreground="#333333"/>
                <DataGridTextColumn Header="User  " Binding="{Binding User}" Width="150" Foreground="#333333"/>
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100" Foreground="#333333"/>
            </DataGrid.Columns>
        </DataGrid>

        <Grid Grid.Row="2" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Button Content="Start" Margin="10"  Grid.Column="0" Background="#8BC34A" Foreground="White"/>
            <Button Content="Pause" Margin="10"  Grid.Column="1" Background="#FFC107" Foreground="White"/>
            <Button Content="Update Status and Stop" Margin="10" Grid.Column="2" Background="#2196F3" Foreground="White"/>
        </Grid>

        <Grid Grid.Row="3" Margin="10" Background="#F7F7F7">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBox Margin="10" Grid.Column="0" Height="50" VerticalAlignment="Top" HorizontalAlignment="Stretch" Background="#F7F7F7" Foreground="#333333">
                <TextBox.Text>
                    <Binding Path="Notes" UpdateSourceTrigger="PropertyChanged"/>
                </TextBox.Text>
            </TextBox>
            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="10">
                <TextBlock Text="Status:" Margin="5" Foreground="#333333"/>
                <RadioButton Content="Succeeded" Margin="5" GroupName="Status" Foreground="#333333" Checked="RadioButton_Checked" Tag="Succeeded"/>
                <RadioButton Content="Failed" Margin="5" GroupName="Status" Foreground="#333333" Checked="RadioButton_Checked" Tag="Failed"/>
            </StackPanel>
        </Grid>
    </Grid>
</Window>





----------------------------------------------




<Window x:Class="DTVPDProject.Pages.DataManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        mc:Ignorable="d"
        Title="DataManagementPageWindow" Height="450" Width="800">
    <Window.Resources>
        <ResourceDictionary>
            <SolidColorBrush x:Key="PrimaryColor" Color="#2196F3" />
            <!-- Blue -->
            <SolidColorBrush x:Key="SecondaryColor" Color="#F7F7F7" />
            <!-- Light Gray -->
            <SolidColorBrush x:Key="AccentColor" Color="#FFC107" />
            <!-- Orange -->
            <SolidColorBrush x:Key="BackgroundColor" Color="#FFFFFF" />
            <!-- White -->
            <SolidColorBrush x:Key="TextColor" Color="#333333" />
            <!-- Dark Gray -->
        </ResourceDictionary>
    </Window.Resources>
    <Grid Background="{StaticResource BackgroundColor}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Search and Filter Section -->
        <StackPanel Grid.Column="0" Grid.Row="0" Margin="10" Background="{StaticResource PrimaryColor}">
            <Label Content="Search:" Foreground="{StaticResource TextColor}"/>
            <TextBox x:Name="searchTextBox" Width="200" Background="{StaticResource SecondaryColor}" Foreground="{StaticResource TextColor}"/>
            <Label Content="Filter by:" Foreground="{StaticResource TextColor}"/>
            <ComboBox x:Name="filterComboBox" Width="200" Margin="5" Background="{StaticResource SecondaryColor}" Foreground="{StaticResource TextColor}">
                <ComboBoxItem Content="Design Specifications"/>
                <ComboBoxItem Content="Simulation Parameters"/>
                <ComboBoxItem Content="Results"/>
            </ComboBox>
            <Button Content="Search" Margin="5" Background="{StaticResource AccentColor}" Foreground="{StaticResource TextColor}"/>
        </StackPanel>

        <!-- Data Grid Section -->
        <DataGrid x:Name="dataGrid" Grid.Column="0" Grid.Row="1" Margin="10" 
                  AutoGenerateColumns="False" Background="{StaticResource BackgroundColor}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Design Specification" Binding="{Binding DesignSpecification}"/>
                <DataGridTextColumn Header="Simulation Parameter" Binding="{Binding SimulationParameter}"/>
                <DataGridTextColumn Header="Result" Binding="{Binding Result}"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Export Button -->
        <Button Content="Export to CSV"  Grid.Column="1" Grid.Row="0" Margin="10,38,10,48" Background="{StaticResource AccentColor}" Foreground="{StaticResource TextColor}"/>
    </Grid>
</Window>
----------------------------------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace DTVPDProject.ViewModels
{
    public class Simulation
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        // Add any other properties you need for the Simulation class
    }

    public class SimulationManagementViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<Simulation> _simulations;
        private string _notes;

        public ObservableCollection<Simulation> Simulations
        {
            get { return _simulations; }
            set
            {
                _simulations = value;
                OnPropertyChanged("Simulations");
            }
        }

        public string Notes
        {
            get { return _notes; }
            set
            {
                _notes = value;
                OnPropertyChanged("Notes");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public SimulationManagementViewModel()
        {
            Simulations = new ObservableCollection<Simulation>();
            // Initialize simulations here...
            // For example:
            Simulations.Add(new Simulation { Id = 1, Name = "Simulation 1", Description = "This is simulation 1" });
            Simulations.Add(new Simulation { Id = 2, Name = "Simulation 2", Description = "This is simulation 2" });
        }
    }
}
------------------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTVPDProject.Repo
{
    internal interface ISimulationResultsRepo
    {
        // Method to retrieve all simulation results
        List<SimulationResult> GetAllSimulationResults();

        // Method to retrieve a simulation result by ID
        SimulationResult GetSimulationResultById(int id);

        // Method to update a simulation result
        void UpdateSimulationResult(SimulationResult simulationResult);

        // Method to add a new simulation result
        void AddSimulationResult(SimulationResult simulationResult);

        // Method to delete a simulation result
        void DeleteSimulationResult(int id);
    }
}

--------------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DTVPDProject.EFRepo;

namespace DTVPDProject.Repo
{
    internal interface ISimulationsRepo
    {
    }
}



--------------------------



C:\StressAnalysis

















cs
----


using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using DTVPDProject.ViewModels;

namespace DTVPDProject.Pages
{
    public partial class SimulationManagementWindow : Window
    {
        public SimulationManagementWindow()
        {
            InitializeComponent();
            this.DataContext = new SimulationManagementViewModel();
        }

        private void RadioButton_Checked(object sender, RoutedEventArgs e)
        {
            var radioButton = sender as RadioButton;
            var viewModel = DataContext as SimulationManagementViewModel;

            if (radioButton != null && viewModel != null)
            {
                string status = radioButton.Tag.ToString();
                viewModel.SelectedSimulation.Status = status;
                // Update status in database
                viewModel.UpdateStatus(viewModel.SelectedSimulation.Id, status);
            }
        }
    }
}


---------------------------------------

viewmodel
--------------


using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using DTVPDProject.Models;
using DTVPDProject.Repository;

namespace DTVPDProject.ViewModels
{
    public class SimulationManagementViewModel : INotifyPropertyChanged
    {
        private readonly SimulationRepository _simulationRepo;
        private Simulation _selectedSimulation;

        public ObservableCollection<Simulation> Simulations { get; set; }
        public Simulation SelectedSimulation
        {
            get { return _selectedSimulation; }
            set
            {
                _selectedSimulation = value;
                OnPropertyChanged("SelectedSimulation");
            }
        }

        public SimulationManagementViewModel()
        {
            _simulationRepo = new SimulationRepository();
            Simulations = new ObservableCollection<Simulation>(_simulationRepo.GetSimulations());
        }

        public void StartSimulation(int simulationId)
        {
            var simulation = _simulationRepo.GetSimulationById(simulationId);
            simulation.Status = "Started";
            _simulationRepo.UpdateSimulation(simulation);
            OnPropertyChanged("Simulations");
        }

        public void StopSimulation(int simulationId)
        {
            var simulation = _simulationRepo.GetSimulationById(simulationId);
            simulation.Status = "Stopped";
            _simulationRepo.UpdateSimulation(simulation);
            OnPropertyChanged("Simulations");
        }

        public void UpdateStatus(int simulationId, string status)
        {
            var simulation = _simulationRepo.GetSimulationById(simulationId);
            simulation.Status = status;
            _simulationRepo.UpdateSimulation(simulation);
            OnPropertyChanged("Simulations");
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


----------------------------------------


repository
-----------------


using System.Collections.Generic;
using System.IO;
using DTVPDProject.Models;

namespace DTVPDProject.Repository
{
    public class SimulationRepository
    {
        // Example data, replace this with actual database access code
        public List<Simulation> GetSimulations()
        {
            string directoryPath = @"C:\StressAnalysis";
            var simulations = new List<Simulation>();

            foreach (var file in Directory.GetFiles(directoryPath, "*.png")) // assuming images are .png
            {
                simulations.Add(new Simulation
                {
                    Id = Path.GetFileNameWithoutExtension(file),
                    ImagePath = file,
                    Status = "Not Started",
                    User = "User A"  // Placeholder user
                });
            }

            return simulations;
        }

        public Simulation GetSimulationById(int id)
        {
            // Placeholder, return a simulation by its ID from the database
            return new Simulation();
        }

        public void UpdateSimulation(Simulation simulation)
        {
            // Implement your database update logic here
        }
    }
}
---------------------------------


xaml
-------

<DataGridTemplateColumn Header="Image" Width="100">
    <DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
            <Image Source="{Binding ImagePath}" Width="50" Height="50"/>
        </DataTemplate>
    </DataGridTemplateColumn.CellTemplate>
</DataGridTemplateColumn>



------------------------------------



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DTVPDProject.EFRepo;

namespace DTVPDProject.Repo
{
    internal interface ISimulationsRepo
    {
    }
}


--------------------------------




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTVPDProject.EFRepo
{
    public class EFSimulationsRepo
    {
    }
}


