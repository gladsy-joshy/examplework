<Window x:Class="PatientAdmissionProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PatientAdmissionProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <StackPanel>
            <Button Content="Register Patient" Command="{Binding RegisterCommand}" />
            <Button Content="View Dashboard" Command="{Binding NavigateToDashboardCommand}" />
            <Button Content="Confirm Appointment" Command="{Binding NavigateToConfirmationCommand}" />
            <ContentControl Content="{Binding CurrentView}" />
        </StackPanel>
    </Grid>
</Window>




<UserControl x:Class="PatientAdmissionProject.PatientRegistrationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <TextBox Text="{Binding NewPatient.Name}" Width="200" Margin="5" />
        <TextBox Text="{Binding NewPatient.Age}" Width="200" Margin="5" />
        <TextBox Text="{Binding NewPatient.DateOfBirth}" Width="200" Margin="5" />
        <TextBox Text="{Binding NewPatient.Address}" Width="200" Margin="5" />
        <ComboBox ItemsSource="{Binding Slots}" SelectedItem="{Binding NewPatient.Slot}" Width="200" Margin="5" />
        <DatePicker SelectedDate="{Binding NewPatient.BookingDate}" Width="200" Margin="5" />
        <Button Content="Register" Command="{Binding RegisterCommand}" Width="200" Margin="5" />
    </StackPanel>
    </UserControl>





<UserControl x:Class="PatientAdmissionProject.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <DataGrid ItemsSource="{Binding Patients}" />
</UserControl>




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientAdmissionProject
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; }
        public DateTime BookingDate { get; set; }
    }
}





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Collections.ObjectModel;
using System.ComponentModel;
using PatientAdmissionProject;

public class MainViewModel : IViewModel, INotifyPropertyChanged
{
    public ObservableCollection<Patient> Patients { get; set; } = new ObservableCollection<Patient>();

    private object _currentView;
    public object CurrentView
    {
        get => _currentView;
        set
        {
            _currentView = value;
            OnPropertyChanged(nameof(CurrentView));
        }
    }

    public MainViewModel()
    {
        CurrentView = new PatientRegistrationViewModel(this);
    }

    public void NavigateToDashboard()
    {
        CurrentView = new PatientDashboardViewModel(Patients);
    }

    public void NavigateToConfirmation()
    {
        CurrentView = new AppointmentConfirmationViewModel();
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}









using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientAdmissionProject
{
    public interface IViewModel
    {
        object CurrentView { get; }
        void NavigateToDashboard();
        void NavigateToConfirmation();
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientAdmissionProject
{
    internal class AppointmentConfirmationViewModel
    {
    }
}






<UserControl x:Class="PatientAdmissionProject.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- Confirmation logic -->
</UserControl>





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Windows.Input;
using PatientAdmissionProject;

public class PatientRegistrationViewModel : INotifyPropertyChanged
{
    private MainViewModel _mainViewModel;
    public Patient NewPatient { get; private set; } = new Patient();

    public ICommand RegisterCommand { get; }

    public PatientRegistrationViewModel(MainViewModel mainViewModel)
    {
        _mainViewModel = mainViewModel;
        RegisterCommand = new RelayCommand(Register);
    }

    private void Register()
    {
        _mainViewModel.Patients.Add(NewPatient);
        _mainViewModel.NavigateToConfirmation();
    }

    public event PropertyChangedEventHandler PropertyChanged;
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action _execute;
    private readonly Func<bool> _canExecute;

    public RelayCommand(Action execute, Func<bool> canExecute = null)
    {
        _execute = execute;
        _canExecute = canExecute;
    }

    public event EventHandler CanExecuteChanged;

    public bool CanExecute(object parameter)
    {
        return _canExecute == null || _canExecute();
    }

    public void Execute(object parameter)
    {
        _execute();
    }

    public void RaiseCanExecuteChanged()
    {
        CanExecuteChanged?.Invoke(this, EventArgs.Empty);
    }
}



new
***""""




achieve navigation between different UserControl views in a single window and bind the commands appropriately, I'll update and streamline the code you've provided to ensure that each button click opens the corresponding UserControl within the same window.

Here's how to set it up:

Step 1: Update MainWindow.xaml

The MainWindow.xaml remains largely the same, but make sure that the ContentControl properly binds to CurrentView, which will dynamically load each UserControl based on the button clicked.

<Window x:Class="PatientAdmissionProject.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PatientAdmissionProject"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <StackPanel>
            <Button Content="Register Patient" Command="{Binding RegisterCommand}" />
            <Button Content="View Dashboard" Command="{Binding DashboardCommand}" />
            <Button Content="Confirm Appointment" Command="{Binding ConfirmationCommand}" />
            <ContentControl Content="{Binding CurrentView}" />
        </StackPanel>
    </Grid>
</Window>

Step 2: Create UserControl Views

Ensure you have the following UserControl views:

1. PatientRegistrationControl.xaml


2. PatientDashboardControl.xaml


3. AppointmentConfirmationControl.xaml



Step 3: Update ViewModels with Commands

Your MainViewModel will contain commands that navigate to each view.

MainViewModel.cs

using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Input;

namespace PatientAdmissionProject
{
    public class MainViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<Patient> Patients { get; set; } = new ObservableCollection<Patient>();
        
        private object _currentView;
        public object CurrentView
        {
            get => _currentView;
            set
            {
                _currentView = value;
                OnPropertyChanged(nameof(CurrentView));
            }
        }

        public ICommand RegisterCommand { get; }
        public ICommand DashboardCommand { get; }
        public ICommand ConfirmationCommand { get; }

        public MainViewModel()
        {
            RegisterCommand = new RelayCommand(OpenRegisterView);
            DashboardCommand = new RelayCommand(OpenDashboardView);
            ConfirmationCommand = new RelayCommand(OpenConfirmationView);

            // Default view
            CurrentView = new PatientRegistrationControl();
        }

        private void OpenRegisterView() => CurrentView = new PatientRegistrationControl();
        private void OpenDashboardView() => CurrentView = new PatientDashboardControl();
        private void OpenConfirmationView() => CurrentView = new AppointmentConfirmationControl();

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

Here, each command changes the CurrentView to the appropriate UserControl.

PatientRegistrationViewModel.cs

Update PatientRegistrationViewModel to bind RegisterCommand to add a patient and navigate to the confirmation view:

using System.ComponentModel;
using System.Windows.Input;

namespace PatientAdmissionProject
{
    public class PatientRegistrationViewModel : INotifyPropertyChanged
    {
        private MainViewModel _mainViewModel;
        public Patient NewPatient { get; private set; } = new Patient();

        public ICommand RegisterCommand { get; }

        public PatientRegistrationViewModel(MainViewModel mainViewModel)
        {
            _mainViewModel = mainViewModel;
            RegisterCommand = new RelayCommand(Register);
        }

        private void Register()
        {
            _mainViewModel.Patients.Add(NewPatient);
            _mainViewModel.CurrentView = new AppointmentConfirmationControl();
        }

        public event PropertyChangedEventHandler PropertyChanged;
    }
}

This setup will add a new patient to the Patients list and navigate to the AppointmentConfirmationControl.

Step 4: RelayCommand.cs

Use a RelayCommand class to handle command execution:

using System;
using System.Windows.Input;

namespace PatientAdmissionProject
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged;

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();
        public void Execute(object parameter) => _execute();
        public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
    }
}

Step 5: Set DataContext in MainWindow.xaml.cs

In the code-behind for MainWindow, set the DataContext to an instance of MainViewModel.

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel();
    }
}

Step 6: Update XAML for UserControls

Ensure each UserControl is set up to work with its specific ViewModel if needed.

PatientRegistrationControl.xaml

<UserControl x:Class="PatientAdmissionProject.PatientRegistrationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <StackPanel>
        <TextBox Text="{Binding NewPatient.Name}" Width="200" Margin="5" />
        <TextBox Text="{Binding NewPatient.Age}" Width="200" Margin="5" />
        <TextBox Text="{Binding NewPatient.DateOfBirth}" Width="200" Margin="5" />
        <TextBox Text="{Binding NewPatient.Address}" Width="200" Margin="5" />
        <ComboBox ItemsSource="{Binding Slots}" SelectedItem="{Binding NewPatient.Slot}" Width="200" Margin="5" />
        <DatePicker SelectedDate="{Binding NewPatient.BookingDate}" Width="200" Margin="5" />
        <Button Content="Register" Command="{Binding RegisterCommand}" Width="200" Margin="5" />
    </StackPanel>
</UserControl>

Final Structure

Each button click in MainWindow will now update CurrentView, displaying the corresponding UserControl (i.e., PatientRegistrationControl, PatientDashboardControl, or AppointmentConfirmationControl). This provides seamless in-window navigation.



